package com.prwss.mis.procurement.reports.struts;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.util.LabelValueBean;
import org.springframework.dao.DataAccessException;

import com.prwss.mis.common.MISJdcDaoImpl;
import com.prwss.mis.common.MISSessionBean;
import com.prwss.mis.common.exception.MISException;
import com.prwss.mis.common.util.MISConstants;
import com.prwss.mis.common.util.MISJasperUtil;
import com.prwss.mis.common.util.MisUtility;
import com.prwss.mis.hr.reports.struts.HRReportsAction;
import com.prwss.mis.hr.reports.struts.HRReportsForm;
import com.prwss.mis.masters.location.dao.LocationBean;
import com.prwss.mis.masters.location.dao.LocationDao;
import com.prwss.mis.masters.program.dao.ProgramBean;
import com.prwss.mis.masters.program.dao.ProgramDao;
import com.prwss.mis.pmm.report.struts.EstimatesAwardContractsReportForm;

public class ProcurementReportsAction extends DispatchAction {
	private ProgramDao programDao;
	private LocationDao locationDao;
	@SuppressWarnings("unused")
	private MISSessionBean misAuditBean;
	private MISJdcDaoImpl misJdcDaoImpl;
	private MISJasperUtil misJasperUtil;
	@SuppressWarnings("rawtypes")
	private Map parameters;
	private Logger log = Logger.getLogger(HRReportsAction.class);

	public void setLocationDao(LocationDao locationDao) {
		this.locationDao = locationDao;
	}
	public void setProgramDao(ProgramDao programDao) {
		this.programDao = programDao;
	}
	public void setMisJasperUtil(MISJasperUtil misJasperUtil) {
		this.misJasperUtil = misJasperUtil;
	}
	public void setMisJdcDaoImpl(MISJdcDaoImpl misJdcDaoImpl) {
		this.misJdcDaoImpl = misJdcDaoImpl;
	}
	@SuppressWarnings("rawtypes")
	public void setParameters(Map parameters) {
		this.parameters = parameters;
	}
	@SuppressWarnings("rawtypes")
	public Map getParameters() {
		return parameters;
	}
	public ActionForward view(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws MISException {
		ProcurementReportsForm procurementReportsForm=(ProcurementReportsForm)form;
		request.setAttribute("misJdcDaoImpl",misJdcDaoImpl);
		request.setAttribute("form",procurementReportsForm);
		this.setAttrib(request);
		return mapping.findForward("display");
	}
	public void filePDF(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		
		ProcurementReportsForm procurementReportsForm=(ProcurementReportsForm)form;
		String jasperFile=procurementReportsForm.getJasperFile();		
		String fileTitle=procurementReportsForm.getFileTitle();
		setWhere(procurementReportsForm,request);
		/*JRFileVirtualizer virtualizer = new JRFileVirtualizer(1, "tmp");
		parameters.put(JRParameter.REPORT_VIRTUALIZER, virtualizer);*/
		misJasperUtil.exportToPDF(jasperFile,fileTitle, parameters, request, response);				
	}	
	public void fileExcel(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		ProcurementReportsForm procurementReportsForm=(ProcurementReportsForm)form;
		String jasperFile=procurementReportsForm.getJasperFile();
		String fileTitle=procurementReportsForm.getFileTitle();
		setWhere(procurementReportsForm,request);
		/*JRFileVirtualizer virtualizer = new JRFileVirtualizer(1, "tmp");
		parameters.put(JRParameter.REPORT_VIRTUALIZER, virtualizer);*/
		misJasperUtil.exportToExcel(jasperFile,fileTitle, parameters, request, response);
	}	
	@Override
	protected ActionForward unspecified(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		this.setAttrib(request);
		try {
			if (request.getSession().getAttribute("misSessionBean") != null) {
				{
					misAuditBean = (MISSessionBean) request.getSession().getAttribute("misSessionBean");
				}
			} else {
				return mapping.findForward("login");
			}
			Set<LabelValueBean> zones = getZones();
			request.getSession().setAttribute("zones", zones);
		    Set<LabelValueBean> circles = getCircles();
			request.getSession().setAttribute("circles", circles);
			Set<LabelValueBean> districts = getDistricts();
			request.getSession().setAttribute("districts",districts );
			Set<LabelValueBean> divisional = getDivisionalOffice();
			request.getSession().setAttribute("divisional", divisional);
			Set<LabelValueBean> programs = getPrograms();
			request.getSession().setAttribute("programs", programs);
			//EstimatesAwardContractsReportForm estimatesAwardContractsReportForm = (EstimatesAwardContractsReportForm)form;
			//refreshEstimatesAwardContractsReportForm(estimatesAwardContractsReportForm);
		} catch (Exception e) {
			e.printStackTrace();
			log.error(e);
		}
		System.out.println("Unspecified.......EstimatesAwardContractsReport");
		return mapping.findForward("cScreen");
	}
	private Set<LabelValueBean> getZones(){
		Set<LabelValueBean> zones = null;
		Set<LocationBean> locationBeans = null;
		try{
			locationBeans = locationDao.getLocationIds("ZONE");
			zones = new HashSet<LabelValueBean>();
			for (LocationBean locationBean2 : locationBeans) {
				zones.add(new LabelValueBean(locationBean2.getLocationId()+MISConstants.LABEL_VALUE_BEAN_SEPARATOR+locationBean2.getLocationName(),locationBean2.getLocationId()));
			}			
		}catch(DataAccessException e){
			log.error(e);
			e.printStackTrace();
		}
		catch(Exception e){
			log.error(e);
			e.printStackTrace();
		}		
		return zones;	
	}
	private Set<LabelValueBean> getCircles(){
		Set<LabelValueBean> circles = null;
		Set<LocationBean> locationBeans = null;
		try{
			locationBeans = locationDao.getLocationIds("CIRCLE");
			circles = new HashSet<LabelValueBean>();
			for (LocationBean locationBean2 : locationBeans) {
				circles.add(new LabelValueBean(locationBean2.getLocationId()+MISConstants.LABEL_VALUE_BEAN_SEPARATOR+locationBean2.getLocationName(),locationBean2.getLocationId()));
			}
		}catch(DataAccessException e){
			log.error(e);
			e.printStackTrace();
		}
		catch(Exception e){
			log.error(e);
			e.printStackTrace();
		}		
		return circles;	
	}	
	private Set<LabelValueBean> getDistricts(){
		Set<LabelValueBean> districts = null;
		Set<LocationBean> locationBeans = null;
		try{
			locationBeans = locationDao.getLocationIds("DISTRICT");
			districts = new HashSet<LabelValueBean>();
			for (LocationBean locationBean2 : locationBeans) {
				districts.add(new LabelValueBean(locationBean2.getLocationId()+MISConstants.LABEL_VALUE_BEAN_SEPARATOR+locationBean2.getLocationName(),locationBean2.getLocationId()));
			}			
		}catch(DataAccessException e){
			log.error(e);
			e.printStackTrace();
		}
		catch(Exception e){
			log.error(e);
			e.printStackTrace();
		}		
		return districts;	
	}
	private Set<LabelValueBean> getDivisionalOffice(){
		Set<LabelValueBean> divisionalOffice = null;
		Set<LocationBean> locationBeans  = null;
		List<String> locationType = new ArrayList<String>();
		locationType.add("DO");
		try{

			locationBeans = locationDao.getLocationIdOnTypeList(locationType);
			divisionalOffice = new HashSet<LabelValueBean>();
			for (LocationBean bean : locationBeans) {
				divisionalOffice.add(new LabelValueBean(bean.getLocationName(),bean.getLocationId()));
			}
			
		}catch(DataAccessException e){
			log.error(e);
			e.printStackTrace();
		}
		catch(Exception e){
			log.error(e);
			e.printStackTrace();
		}
		return divisionalOffice;	
	}
	private Set<LabelValueBean> getPrograms(){
		Set<LabelValueBean> programs = null;
		List<ProgramBean> programBeans = null;
		try{
			ProgramBean programBean = new ProgramBean();
			List<String> statusList = new ArrayList<String>();
			statusList.add(MISConstants.MASTER_STATUS_APPROVED);
			programBeans = programDao.findProgram(programBean, statusList);
			programs = new HashSet<LabelValueBean>();
			for (ProgramBean programBean2 : programBeans) {
				programs.add(new LabelValueBean(programBean2.getProgramId()+MISConstants.LABEL_VALUE_BEAN_SEPARATOR+programBean2.getProgramName(),programBean2.getProgramId()));				
			}			
		}catch(DataAccessException e){
			log.error(e);
			e.printStackTrace();
		}
		catch(Exception e){
			log.error(e);
			e.printStackTrace();
		}		
		return programs;	
	}	
	private void setAttrib(HttpServletRequest request) {
		request.setAttribute("Rpt", "rpt");
		request.setAttribute("menuId", request.getParameter("menuId"));
		request.setAttribute("d__mode", request.getParameter("d__mode"));
		request.setAttribute("d__ky", "locationId");
	}
	@SuppressWarnings("unused")
	private void refreshprocurementReportsForm(ProcurementReportsForm procurementReportsForm){
		procurementReportsForm.setSelectZone(null);
		procurementReportsForm.setSelectCircle(null);
		procurementReportsForm.setSelectDistrict(null);
		procurementReportsForm.setSelectProgram(null);
		procurementReportsForm.setApprovalStatus(null);
		procurementReportsForm.setAsOnDate(null);		
	}
	@SuppressWarnings({ "rawtypes", "unchecked" })
	private void setWhere(ProcurementReportsForm procurementReportsForm,HttpServletRequest request){
		String innerWhere=" and 1=1 ";
		String selectZone=procurementReportsForm.getSelectZone();
		String zoneId=procurementReportsForm.getZoneId();
		String selectCircle=procurementReportsForm.getSelectCircle();
		String circleId=procurementReportsForm.getCircleId();
		String selectDistrict=procurementReportsForm.getSelectDistrict();
		String districtId=procurementReportsForm.getDistrictId();
		String selectDivisionalOfficeId=procurementReportsForm.getSelectDivisionalOfficeId();
		String divisionalOfficeId=procurementReportsForm.getDivisionalOfficeId();
		String selectProgram=procurementReportsForm.getSelectProgram();
		String approvalStatus=procurementReportsForm.getApprovalStatus();
		String selectReport=procurementReportsForm.getSelectReport();
		String fromPeriod=procurementReportsForm.getFromDate();
		String toPeriod=procurementReportsForm.getToDate();
		String programId = "'"+procurementReportsForm.getProgramId()+"'";
		String tenderType = "'"+procurementReportsForm.getTenderType()+"'";
		String selectPeriod=procurementReportsForm.getSelectPeriod();
		String postPriorStatus=procurementReportsForm.getPostPriorStatus();
		String contract_status = "'"+procurementReportsForm.getContract()+"'";
		String contractStatus = procurementReportsForm.getContract();
		String schemeType = procurementReportsForm.getSchemeType();
		String phase = procurementReportsForm.getPhase();
		parameters = new HashMap();
		String queryString="";
		String from = "All";
		String to = "All";
		String from_date = "All";
		String to_date = "All";
		String where="1=1 ";
		String scheme_types = null;
		if(selectZone.equals("S")){
			where=where+" and zone_id='"+zoneId+"' ";
			queryString=queryString+" Zone: "+zoneId;
		}else{
			queryString=queryString+" Zone: All";
		}
		if(selectCircle.equals("S")){
			where=where+" and circle_id='"+circleId+"' ";
			queryString=queryString+", Circle: "+circleId;
		}else{
			queryString=queryString+", Circle: All";
		}
		if(selectDistrict.equals("S")){
			where=where+"and district_id='"+districtId+"' ";
			queryString=queryString+", District: "+districtId;
		}else{
			queryString=queryString+", District: All";
		}
		if(selectDivisionalOfficeId.equals("S")){
			if(selectReport.equals("procrpt001_5")||selectReport.equals("procrpt001_6")||selectReport.equals("procrpt001_9")||selectReport.equals("procrpt001_6_dtl")){
					
			}else{
				where=where+"and location_id='"+divisionalOfficeId+"' ";
				
			}
		}
		if(selectReport.equals("procrpt001_13")||selectReport.equals("procrpt001_13_old")){
		if(MisUtility.ifEmpty(tenderType))
			where=where+" and package_type="+tenderType;
		}
		
		
		
		if(schemeType.equals("all") || schemeType.equals("ws") || schemeType.equals("sw") || schemeType.equals("imp") )
		{
			if(selectReport.equals("procrpt001_2_abs"))
			{
				if(schemeType.equals("all")){
					innerWhere=innerWhere+" and ws_sw in('ws','sw','imp')";
					scheme_types = "all";
				}else{
						if(schemeType.equals("ws")){
							innerWhere=innerWhere+" and ws_sw='ws'";
							}else if(schemeType.equals("sw")){
								innerWhere=innerWhere+"  and ws_sw='sw'";
						}else if(schemeType.equals("imp")){
							innerWhere=innerWhere+"  and ws_sw='imp'";
						}
				}
				
			}
		
		else
		{
			if(MisUtility.ifEmpty(schemeType)){
				if(schemeType.equals("all")){
					where=where+" and scheme_source in('ws','sw','imp')";
					scheme_types = "All";
				}else{
					where=where+" and scheme_source='"+schemeType+"' ";
						if(schemeType.equals("ws")){
							scheme_types = "Water Supply";
						}else if(schemeType.equals("sw")){
							scheme_types = "Sewerage";
						}else if(schemeType.equals("imp")){
							scheme_types = "Performance Improvement";
						}
				}
			}
			
		}
		}
		
		
		
		System.out.println("divisionalOfficeId: "+divisionalOfficeId);
		System.out.println("selectDivisionalOfficeId: "+selectDivisionalOfficeId);
		if(selectProgram.equals("S")){
			if(selectReport.equals("procrpt001_2")||selectReport.equals("procrpt001_7")||selectReport.equals("procrpt001_12")){
				System.out.println("1 selectProgram: "+selectProgram);
				where=where+ " and program_id="+programId;
			}/*else{
				programId= " 1=1 ";
			}*/
		}
		System.out.println("2 selectProgram: "+selectProgram);
		System.out.println("programId: "+programId);
		if(selectReport.equals("procrpt001_6")||selectReport.equals("procrpt001_6_dtl")||selectReport.equals("procrpt001_7")||selectReport.equals("procrpt001_8")
				||selectReport.equals("procrpt001_9")||selectReport.equals("procrpt001_12")||selectReport.equals("procrpt001_11")
				||selectReport.equals("procrpt001_10")){
			innerWhere = "1=1";
		}
		System.out.println("selectPeriod: "+selectPeriod);
		System.out.println("fromPeriod: "+fromPeriod);
		System.out.println("toPeriod: "+toPeriod);
		from = fromPeriod==null?"All":fromPeriod;
		//System.out.println("from: "+from);
		to = toPeriod==null?"All":toPeriod;
		//System.out.println("to: "+to);
		from_date = fromPeriod==null?"All":MisUtility.convertStringToDate(fromPeriod).toString();
		//System.out.println("from_date: "+from_date);
		to_date = toPeriod==null?"All":MisUtility.convertStringToDate(toPeriod).toString();		
		if(selectPeriod.equals("S")){
			if(selectReport.equals("procrpt001_1")||selectReport.equals("procrpt001_4")||selectReport.equals("procrpt001_2")||selectReport.equals("procrpt001_3")){
				innerWhere += " and bid_invitation_date >='"+MisUtility.convertStringToDate(fromPeriod)+"'and bid_invitation_date <='"+MisUtility.convertStringToDate(toPeriod)+"'";
			}else if(selectReport.equals("procrpt001_5")){
				innerWhere += " and publish_date between '"+MisUtility.convertStringToDate(fromPeriod)+"' and '"+MisUtility.convertStringToDate(toPeriod)+"'";
			}
			else if(selectReport.equals("procrpt001_6")||selectReport.equals("procrpt001_11")||selectReport.equals("procrpt001_6_dtl")){
				innerWhere += "and publish_date between '"+MisUtility.convertStringToDate(fromPeriod)+"' and '"+MisUtility.convertStringToDate(toPeriod)+"'";
			}
			else if(selectReport.equals("procrpt001_7")||selectReport.equals("procrpt001_8")||selectReport.equals("procrpt001_10")){
				innerWhere += " and ta.signing_of_contract between '"+MisUtility.convertStringToDate(fromPeriod)+"' and '"+MisUtility.convertStringToDate(toPeriod)+"'";
			}else if(selectReport.equals("procrpt001_12")){
				innerWhere += " and con_award_decide_date between '"+MisUtility.convertStringToDate(fromPeriod)+"' and '"+MisUtility.convertStringToDate(toPeriod)+"'";
			from_date = fromPeriod;
			to_date = toPeriod;
			}
			queryString=queryString+", Period: "+fromPeriod + " to "+toPeriod;
		}
		else{
			if(selectReport.equals("procrpt001_13")||selectReport.equals("procrpt001_13_old")){
				from_date = "1950-01-01";
			}
			from = "Beginning";
			to = "All";
		}
		if(selectReport.equals("procrpt001_2") && !postPriorStatus.equals("A")){
			where+=" and post_prior_status='"+postPriorStatus+"'";
		}
		if(selectReport.equals("procrpt001_3") && !postPriorStatus.equals("A")){
			where+=" and post_prior_status='"+postPriorStatus+"'";
		}
		if(selectReport.equals("procrpt001_2")){
			//if(MisUtility.ifEmpty(contractStatus)){
				if(contractStatus.equals("Completed") || contractStatus.equals("Ongoing") || contractStatus.equals("New") ){
					where = where+" and contract_status = '"+contractStatus+"'";
				}
				else{
					where = where+" and contract_status in('Completed','Ongoing','New')";
				}
			//}
		}
		if(selectReport.equals("procrpt001_15")){
			if(phase.equals("A"))
				innerWhere = "bidding_phase_all= '1' ";
			else if(phase.equals("1"))
				innerWhere = " bidding_phase = '1' ";
			else if(phase.equals("2"))
				innerWhere = " bidding_phase = '2' ";
			else if(phase.equals("3"))
				innerWhere = " bidding_phase = '3' ";
			else if(phase.equals("4"))
				innerWhere = " bidding_phase = '4' ";
			else if(phase.equals("5"))
				innerWhere = " bidding_phase = '5' ";	
			
		}
		if(selectReport.equals("procrpt001_16")){
			if(phase.equals("A"))
				innerWhere = " 1=1 ";
			else if(phase.equals("1"))
				innerWhere = " row_id = '1' ";
			else if(phase.equals("2"))
				innerWhere = " row_id = '2' ";
			else if(phase.equals("3"))
				innerWhere = " row_id = '3' ";
			else if(phase.equals("4"))
				innerWhere = " row_id = '4' ";
			else if(phase.equals("5"))
				innerWhere = " row_id = '5' ";			
		}
		if(selectReport.equals("procrpt001_17")){
			if(phase.equals("A"))
				innerWhere = " 1=1 ";
			else if(phase.equals("1"))
				innerWhere = " row_id = '1' ";
			else if(phase.equals("2"))
				innerWhere = " row_id = '2' ";
			else if(phase.equals("3"))
				innerWhere = " row_id = '3' ";
			else if(phase.equals("4"))
				innerWhere = " row_id = '4' ";
			else if(phase.equals("5"))
				innerWhere = " row_id = '5' ";			
		}
		parameters.put("where", where);
		parameters.put("queryString", queryString);
		parameters.put("innerWhere", innerWhere);
		parameters.put("contract_status", contract_status);
		parameters.put("from", from);
		parameters.put("to", to);
		parameters.put("from_date", from_date);
		parameters.put("to_date", to_date);
		parameters.put("prog_id", programId);
		parameters.put("tender_type",tenderType);
		parameters.put("schemesource", scheme_types);
		parameters.put("bid_phase", phase);
		System.out.println("parameters: "+parameters.toString());
		System.out.println("From_date"+from_date);
		System.out.println("to_date"+to_date);
		System.out.println("selectReport: "+selectReport);
		System.out.println("Action: where : "+where);
		System.out.println("Action: innerWhere : "+innerWhere);
		System.out.println("Action: queryString: "+queryString);
	}	
}
